package com.example.wbs;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import java.util.*;

@Controller // This means that this class is a Controller
@RequestMapping(path="/users") // This means URL's start with /demo (after Application path)
public class UserController {
  @Autowired // This means to get the bean called ExerciseRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;
  BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody Integer addNewUser (@RequestBody UserModel newUser) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    // ExerciseModel n = new ExerciseModel();
    // n.setName(name);
    // n.setWorkoutName(workoutName);
    // n.setLength(length);
    // n.setRest(rest);

    List<UserModel> users = userRepository.findByUsername(newUser.getUsername());
    if(users.size()>0) return -1;
    newUser.setPassword(passwordEncoder.encode(newUser.getPassword()));
    UserModel saved= userRepository.save(newUser);
    return saved.getId();
    
  }

  @PostMapping(path="/login")
  public @ResponseBody Integer Login(@RequestBody UserModel userInfo) {
    List<UserModel> users = userRepository.findByUsername(userInfo.getUsername());
    if(users.size()==0 || passwordEncoder.matches(userInfo.getPassword(), users.get(0).getPassword())) return -1;
    return users.get(0).getId();
  }
}